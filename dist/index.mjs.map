{"version":3,"sources":["/Users/yordanlazarov/Sites/components/requester/dist/index.mjs","../src/enum/Method.ts","../src/Response.ts","../src/enum/InterceptEvent.ts","../src/enum/RequestBodyType.ts","../src/helper/DataHelper.ts","../src/Requester.ts","../src/index.ts"],"names":["Method","Method_default","RequesterResponse","response","status","getData","Promise","resolve","reject","data","headers","get","includes","json","text","then","getHeaders","Response_default","InterceptEvent","InterceptEvent_default","RequestBodyType","RequestBodyTypeHeaders","RequestBodyType_default","convertFormDataToObject","formData","forEach","value","originalKey","keys","match","length","Error","lastKey","pop","isArray","endsWith","nested","key","convertObjectToFormData","parentKeys","FormData","keyPath","Object","File","formKey","shift","map","k","join","set","convertObjectToURLSearchParams","URLSearchParams","fromEntries","entries","convertURLSearchParamsToObject","searchData","console","log","create","assign","_Requester","config","defaults","fetch","url","method","GET","body","query","signal","auth","URL","baseURL","search","searchParams","getQuery","toString","abortController","AbortController","options","POST","timeoutInterval","setTimeout","abort","timeout","interceptors","filter","i","PRE_REQUEST","callback","PRE_RESPONSE","POST_RESPONSE","catch","error","finally","clearTimeout","post","bodyType","bodyObject","JSON","parse","e","Urlencoded","stringify","on","event","callable","push","off","interceptorId","splice","Requester","Requester_default","src_default","default"],"mappings":"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","sourcesContent":["// src/enum/Method.ts\nvar Method = /* @__PURE__ */ ((Method2) => {\n  Method2[\"POST\"] = \"POST\";\n  Method2[\"GET\"] = \"GET\";\n  Method2[\"PUT\"] = \"PUT\";\n  Method2[\"DELETE\"] = \"DELETE\";\n  Method2[\"PATCH\"] = \"PATCH\";\n  return Method2;\n})(Method || {});\nvar Method_default = Method;\n\n// src/Response.ts\nvar RequesterResponse = class {\n  constructor(response) {\n    this.response = response;\n    this.status = response.status;\n  }\n  getData() {\n    return new Promise((resolve, reject) => {\n      if (this.data) {\n        return resolve(this.data);\n      }\n      (this.response.headers.get(\"content-type\")?.includes(\"application/json\") ? this.response.json() : this.response.text()).then((data) => {\n        this.data = data;\n        resolve(this.data);\n      });\n    });\n  }\n  getHeaders() {\n    return this.response.headers;\n  }\n};\nvar Response_default = RequesterResponse;\n\n// src/enum/InterceptEvent.ts\nvar InterceptEvent = /* @__PURE__ */ ((InterceptEvent2) => {\n  InterceptEvent2[InterceptEvent2[\"PRE_REQUEST\"] = 0] = \"PRE_REQUEST\";\n  InterceptEvent2[InterceptEvent2[\"POST_REQUEST\"] = 1] = \"POST_REQUEST\";\n  InterceptEvent2[InterceptEvent2[\"PRE_RESPONSE\"] = 2] = \"PRE_RESPONSE\";\n  InterceptEvent2[InterceptEvent2[\"POST_RESPONSE\"] = 3] = \"POST_RESPONSE\";\n  return InterceptEvent2;\n})(InterceptEvent || {});\nvar InterceptEvent_default = InterceptEvent;\n\n// src/enum/RequestBodyType.ts\nvar RequestBodyType = /* @__PURE__ */ ((RequestBodyType2) => {\n  RequestBodyType2[\"FormData\"] = \"form-data\";\n  RequestBodyType2[\"Urlencoded\"] = \"x-www-form-urlencoded\";\n  RequestBodyType2[\"JSON\"] = \"raw-json\";\n  RequestBodyType2[\"Text\"] = \"raw-text\";\n  RequestBodyType2[\"Xml\"] = \"raw-xml\";\n  RequestBodyType2[\"Html\"] = \"raw-html\";\n  RequestBodyType2[\"Javascript\"] = \"raw-javascript\";\n  RequestBodyType2[\"Binary\"] = \"binary\";\n  return RequestBodyType2;\n})(RequestBodyType || {});\nvar RequestBodyTypeHeaders = {\n  [\"form-data\" /* FormData */]: {},\n  [\"x-www-form-urlencoded\" /* Urlencoded */]: {\n    \"Content-Type\": \"application/x-www-form-urlencoded\"\n  },\n  [\"raw-json\" /* JSON */]: {\n    \"Content-Type\": \"application/json\"\n  },\n  [\"raw-text\" /* Text */]: {\n    \"Content-Type\": \"text/plain\"\n  },\n  [\"raw-html\" /* Html */]: {\n    \"Content-Type\": \"text/html\"\n  },\n  [\"raw-xml\" /* Xml */]: {\n    \"Content-Type\": \"text/xml\"\n  },\n  [\"raw-javascript\" /* Javascript */]: {\n    \"Content-Type\": \"text/javascript\"\n  },\n  [\"binary\" /* Binary */]: {\n    \"Content-Type\": \"application/octet-stream\"\n  }\n};\nvar RequestBodyType_default = RequestBodyType;\n\n// src/helper/DataHelper.ts\nvar convertFormDataToObject = (formData) => {\n  const data = {};\n  formData.forEach(function(value, originalKey) {\n    const keys = originalKey.match(/\\w+/gi) ?? [];\n    if (!keys.length) {\n      throw new Error(\"Invalid Form Data Key: \" + originalKey);\n    }\n    const lastKey = keys.pop();\n    const isArray = originalKey.endsWith(\"[]\");\n    let nested = data;\n    (keys || []).forEach(function(key) {\n      nested[key] = { ...nested[key] ?? {} };\n      nested = nested[key];\n    });\n    if (lastKey) {\n      nested[lastKey] = isArray ? [...nested[lastKey] ?? [], value] : value;\n    }\n  });\n  return data;\n};\nvar convertObjectToFormData = (data, formData, parentKeys) => {\n  formData = formData || new FormData();\n  for (let key in data) {\n    const value = data[key];\n    const keyPath = [...parentKeys || [], key];\n    if (value instanceof Object && !(value instanceof File)) {\n      formData = convertObjectToFormData(value, formData, keyPath);\n      continue;\n    }\n    const formKey = keyPath.shift() + keyPath.map((k) => \"[\" + k + \"]\").join(\"\");\n    formData.set(formKey, value);\n  }\n  return formData;\n};\nvar convertObjectToURLSearchParams = (data) => {\n  const formData = convertObjectToFormData(data);\n  return new URLSearchParams(Object.fromEntries(formData.entries()));\n};\nvar convertURLSearchParamsToObject = (searchData) => {\n  let data = {};\n  searchData.forEach((value, originalKey) => {\n    console.log(\"value\", value, originalKey);\n    const keys = originalKey.match(/\\w+/gi);\n    const lastKey = Object.create(keys).pop();\n    let nested = data;\n    (keys || []).forEach((key) => {\n      if (key === lastKey) {\n        nested[key] = originalKey.match(/\\[]$/i) ? Object.assign(nested[key] || [], [value]) : value;\n      } else {\n        nested[key] = nested[key] || {};\n        nested = nested[key];\n      }\n    });\n  });\n  return data;\n};\n\n// src/Requester.ts\nvar _Requester = class _Requester {\n  constructor(config) {\n    this.config = { ...config, ..._Requester.defaults };\n  }\n  static on(event, callable) {\n    return this.interceptors.push([event, callable]);\n  }\n  static off(interceptorId) {\n    if (this.interceptors[interceptorId] === void 0)\n      return;\n    this.interceptors.splice(interceptorId, 1);\n  }\n  fetch({\n    url,\n    method = Method_default.GET,\n    body,\n    query,\n    signal,\n    auth,\n    headers\n  }) {\n    url = new URL(url, this.config?.baseURL || void 0);\n    const search = new URLSearchParams(\n      {\n        ...query ? Object.fromEntries(query instanceof URLSearchParams ? query : query instanceof FormData ? convertObjectToURLSearchParams(convertFormDataToObject(query)) : new URLSearchParams(query)) : {},\n        ...Object.fromEntries(url.searchParams),\n        ...new URLSearchParams(auth?.getQuery() || {})\n      }\n    );\n    url.search = search.toString();\n    const abortController = new AbortController();\n    let options = {\n      signal: signal || abortController.signal,\n      method: method || Method_default.GET,\n      headers: {\n        ...headers || {},\n        ...auth?.getHeaders() || {},\n        ...this.config?.headers || {}\n      }\n    };\n    switch (method) {\n      case Method_default.POST: {\n        options = {\n          ...options,\n          body\n        };\n      }\n    }\n    const timeoutInterval = setTimeout(() => abortController?.abort(), this.config.timeout || 3e4);\n    _Requester.interceptors.filter(([i]) => i === InterceptEvent_default.PRE_REQUEST).forEach(([i, callback]) => {\n      options = callback(options);\n    });\n    return new Promise((resolve, reject) => {\n      fetch(url, options).then((response) => {\n        _Requester.interceptors.filter(([i]) => i === InterceptEvent_default.PRE_RESPONSE).forEach(([i, callback]) => {\n          response = callback(response);\n        });\n        resolve(new Response_default(response));\n        _Requester.interceptors.filter(([i]) => i === InterceptEvent_default.POST_RESPONSE).forEach(([i, callback]) => {\n          response = callback(response);\n        });\n      }).catch((error) => reject(error)).finally(() => clearTimeout(timeoutInterval));\n    });\n  }\n  post(url, body, bodyType) {\n    let bodyObject = null;\n    bodyType || (bodyType = RequestBodyType_default.JSON);\n    switch (typeof body) {\n      case \"string\": {\n        try {\n          bodyObject = JSON.parse(body);\n        } catch (e) {\n        }\n        break;\n      }\n      case \"object\": {\n        bodyObject = body instanceof FormData ? convertFormDataToObject(body) : body;\n        break;\n      }\n    }\n    const formData = bodyObject ? convertObjectToFormData(bodyObject) : null;\n    switch (bodyType) {\n      case RequestBodyType_default.Urlencoded: {\n        body = bodyObject ? convertObjectToURLSearchParams(bodyObject).toString() : body;\n        break;\n      }\n      case RequestBodyType_default.FormData: {\n        body = formData || body;\n        break;\n      }\n      case RequestBodyType_default.JSON: {\n        body = bodyObject ? JSON.stringify(bodyObject) : body;\n        break;\n      }\n      default: {\n      }\n    }\n    return this.fetch({\n      url,\n      method: Method_default.POST,\n      body,\n      headers: RequestBodyTypeHeaders[bodyType]\n    });\n  }\n  get(url, query) {\n    if (!(query instanceof URLSearchParams)) {\n      query = convertObjectToURLSearchParams(query);\n    }\n    return this.fetch({\n      url,\n      method: Method_default.GET,\n      query\n    });\n  }\n};\n_Requester.interceptors = [];\n_Requester.defaults = {\n  timeout: 3e3\n};\nvar Requester = _Requester;\nvar Requester_default = Requester;\n\n// src/index.ts\nvar src_default = Requester_default;\nexport {\n  InterceptEvent_default as InterceptEvent,\n  Method_default as Method,\n  RequestBodyType_default as RequestBodyType,\n  convertFormDataToObject,\n  convertObjectToFormData,\n  convertObjectToURLSearchParams,\n  convertURLSearchParamsToObject,\n  src_default as default\n};\n","enum Method {\n    POST = 'POST',\n    GET = 'GET',\n    PUT = 'PUT',\n    DELETE = 'DELETE',\n    PATCH = 'PATCH'\n}\n\nexport default Method;\n","class RequesterResponse {\n    response: Response;\n    status: number;\n    data: any;\n\n    constructor(response: Response) {\n        this.response = response;\n        this.status = response.status;\n    }\n\n    getData(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            if(this.data) {\n                return resolve(this.data);\n            }\n\n            (this.response.headers.get('content-type')?.includes('application/json') ? this.response.json() : this.response.text()).then((data) => {\n                this.data = data;\n                resolve(this.data);\n            })\n        });\n    }\n\n    getHeaders(): Headers {\n        return this.response.headers;\n    }\n\n}\n\nexport default RequesterResponse;\n","enum InterceptEvent {\n    PRE_REQUEST,\n    POST_REQUEST,\n    PRE_RESPONSE,\n    POST_RESPONSE\n}\n\nexport default InterceptEvent;\n","enum RequestBodyType {\n    FormData = 'form-data',\n    Urlencoded = 'x-www-form-urlencoded',\n    JSON = 'raw-json',\n    Text = 'raw-text',\n    Xml = 'raw-xml',\n    Html = 'raw-html',\n    Javascript = 'raw-javascript',\n    Binary = 'binary'\n}\n\nconst RequestBodyTypeHeaders: { [key: string]: { [key: string]: string } } = {\n    [RequestBodyType.FormData]: {\n    },\n    [RequestBodyType.Urlencoded]: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n    },\n    [RequestBodyType.JSON]: {\n        'Content-Type': 'application/json'\n    },\n    [RequestBodyType.Text]: {\n        'Content-Type': 'text/plain'\n    },\n    [RequestBodyType.Html]: {\n        'Content-Type': 'text/html'\n    },\n    [RequestBodyType.Xml]: {\n        'Content-Type': 'text/xml'\n    },\n    [RequestBodyType.Javascript]: {\n        'Content-Type': 'text/javascript'\n    },\n    [RequestBodyType.Binary]: {\n        'Content-Type': 'application/octet-stream'\n    }\n};\n\nexport {RequestBodyTypeHeaders};\n\nexport default RequestBodyType\n","import StandardObjectType from \"@src/type/StandardObjectType\";\n\nconst convertFormDataToObject = (formData: FormData): StandardObjectType => {\n    const data: StandardObjectType = {};\n    formData.forEach(function (value, originalKey) {\n        const keys = originalKey.match(/\\w+/gi) ?? [];\n        if (!keys.length) {\n            throw new Error('Invalid Form Data Key: ' + originalKey);\n        }\n        const lastKey = keys.pop();\n        const isArray = originalKey.endsWith('[]');\n\n        let nested: any = data;\n        (keys || []).forEach(function (key) {\n            nested[key] = {...(nested[key] ?? {})};\n            nested = nested[key];\n        });\n\n        if (lastKey) {\n            nested[lastKey] = isArray ? [...(nested[lastKey] ?? []), value] : value;\n        }\n    });\n\n    return data;\n};\n\nconst convertObjectToFormData = (data: StandardObjectType, formData?: FormData, parentKeys?: string[]): FormData => {\n    formData = formData || new FormData();\n\n    for (let key in data) {\n        const value: any = data[key];\n        const keyPath = [...(parentKeys || []), key];\n        if (value instanceof Object && !(value instanceof File)) {\n            formData = convertObjectToFormData(value, formData, keyPath);\n            continue;\n        }\n\n        const formKey = keyPath.shift() + keyPath.map(k => '[' + k + ']').join('');\n        formData.set(formKey, value);\n    }\n\n    return formData;\n}\n\nconst convertObjectToURLSearchParams = (data: StandardObjectType): URLSearchParams => {\n    const formData = convertObjectToFormData(data);\n    return new URLSearchParams(Object.fromEntries(formData.entries()) as StandardObjectType)\n}\n\nconst convertURLSearchParamsToObject = (searchData: URLSearchParams): object => {\n    let data: object = {};\n    searchData.forEach((value, originalKey) => {\n        console.log('value', value, originalKey);\n        const keys = originalKey.match(/\\w+/gi)\n        const lastKey = Object.create(keys).pop();\n        let nested:{[key: string]: any} = data;\n        (keys || []).forEach((key) => {\n            if (key === lastKey) {\n                nested[key as keyof object] = originalKey.match(/\\[]$/i) ? Object.assign(nested[key as keyof object] || [], [value]) : value;\n            } else {\n                nested[key as keyof object] = (nested[key as keyof object] || {});\n                nested = nested[key as keyof object];\n            }\n        });\n    });\n\n    return data;\n};\n\nexport {convertFormDataToObject, convertObjectToFormData, convertObjectToURLSearchParams, convertURLSearchParamsToObject};\n","import Request from \"@src/type/Request\";\nimport Method from \"@src/enum/Method\";\nimport Response from \"@src/Response\";\nimport InterceptEvent from \"@src/enum/InterceptEvent\";\nimport RequestBodyType, {RequestBodyTypeHeaders} from \"@src/enum/RequestBodyType\";\nimport Config from \"@src/type/Config\";\nimport {convertFormDataToObject, convertObjectToFormData, convertObjectToURLSearchParams, convertURLSearchParamsToObject} from \"@src/helper/DataHelper\";\nimport StandardObjectType from \"@src/type/StandardObjectType\";\n\nclass Requester {\n\n    private static interceptors: Array<[InterceptEvent, Function]> = [];\n\n    static defaults: Config = {\n        timeout: 3000\n    };\n\n    private config: Config;\n\n    constructor(config?: Config) {\n        this.config = {...config, ...Requester.defaults};\n    }\n\n    static on(event: InterceptEvent, callable: Function): number {\n        return this.interceptors.push([event, callable]);\n    };\n\n    static off(interceptorId: number): void {\n        if (this.interceptors[interceptorId] === undefined)\n            return;\n\n        this.interceptors.splice(interceptorId, 1);\n    }\n\n    fetch({\n              url,\n              method = Method.GET,\n              body,\n              query,\n              signal,\n              auth,\n              headers\n          }: Request): Promise<Response> {\n\n        url = new URL(url, this.config?.baseURL || undefined);\n        const search = new URLSearchParams({\n                ...(query ? Object.fromEntries(query instanceof URLSearchParams ? query : (query instanceof FormData ? convertObjectToURLSearchParams(convertFormDataToObject(query)) : new URLSearchParams(query))) : {}),\n                ...(Object.fromEntries((url as URL).searchParams)),\n                ...(new URLSearchParams(auth?.getQuery() || {}))\n            }\n        );\n\n        url.search = search.toString();\n\n        const abortController = new AbortController();\n        let options: any = {\n            signal: signal || abortController.signal,\n            method: method || Method.GET,\n            headers: {\n                ...(headers || {}),\n                ...(auth?.getHeaders() || {}),\n                ...(this.config?.headers || {})\n            }\n        };\n\n        switch (method) {\n            case Method.POST: {\n                options = {\n                    ...options,\n                    body: body\n                }\n            }\n        }\n\n        const timeoutInterval = setTimeout(() => abortController?.abort(), this.config.timeout || 30000);\n\n        Requester.interceptors.filter(([i]) => i === InterceptEvent.PRE_REQUEST).forEach(([i, callback]) => {\n            options = callback(options);\n        });\n\n        return new Promise((resolve, reject) => {\n            fetch(url, options)\n                .then(response => {\n                    Requester.interceptors.filter(([i]) => i === InterceptEvent.PRE_RESPONSE).forEach(([i, callback]) => {\n                        response = callback(response);\n                    });\n\n                    resolve(new Response(response));\n\n                    Requester.interceptors.filter(([i]) => i === InterceptEvent.POST_RESPONSE).forEach(([i, callback]) => {\n                        response = callback(response);\n                    });\n                })\n                .catch((error) => reject(error))\n                .finally(() => clearTimeout(timeoutInterval));\n        });\n    }\n\n    post(url: string, body?: FormData | string | StandardObjectType, bodyType?: RequestBodyType) {\n        let bodyObject = null;\n        bodyType ||= RequestBodyType.JSON;\n\n        switch (typeof body) {\n            case 'string': {\n                try {\n                    bodyObject = JSON.parse(body);\n                } catch (e) {\n\n                }\n                break;\n            }\n            case 'object': {\n                bodyObject = (body instanceof FormData) ? convertFormDataToObject(body) : body;\n                break;\n            }\n        }\n\n        const formData = bodyObject ? convertObjectToFormData(bodyObject) : null;\n\n        switch (bodyType) {\n            case RequestBodyType.Urlencoded: {\n                body = bodyObject ? (convertObjectToURLSearchParams(bodyObject)).toString() : body;\n                break;\n            }\n            case RequestBodyType.FormData: {\n                    body = formData || body;\n                break;\n            }\n            case RequestBodyType.JSON: {\n                    body = bodyObject ? JSON.stringify(bodyObject) : body;\n                break;\n            }\n            default: {\n\n            }\n        }\n\n        return this.fetch({\n            url,\n            method: Method.POST,\n            body,\n            headers: RequestBodyTypeHeaders[bodyType]\n        });\n    }\n\n    get(url: string, query: StandardObjectType | URLSearchParams) {\n\n        if(!(query instanceof URLSearchParams)) {\n            query = convertObjectToURLSearchParams(query);\n        }\n\n        return this.fetch({\n            url,\n            method: Method.GET,\n            query\n        });\n    }\n}\n\nexport {convertObjectToURLSearchParams, convertObjectToFormData, convertFormDataToObject, convertURLSearchParamsToObject};\n\nexport default Requester;\n","import Requester, {convertFormDataToObject, convertObjectToURLSearchParams, convertObjectToFormData, convertURLSearchParamsToObject} from \"@src/Requester\";\nimport InterceptEvent from \"@src/enum/InterceptEvent\";\nimport Method from \"@src/enum/Method\";\nimport RequestBodyType from \"@src/enum/RequestBodyType\";\n\n\nexport {InterceptEvent, Method, RequestBodyType, convertFormDataToObject, convertObjectToURLSearchParams, convertObjectToFormData, convertURLSearchParamsToObject};\n\nexport default Requester;\n"]}