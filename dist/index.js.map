{"version":3,"sources":["/Users/yordanlazarov/Sites/components/requester/dist/index.js","../src/index.ts","../src/enum/Method.ts","../src/Response.ts","../src/enum/InterceptEvent.ts","../src/enum/RequestBodyType.ts","../src/helper/DataHelper.ts","../src/Requester.ts","../src/enum/AppendParameterTo.ts","../src/component/authorization/AbstractAuthorization.ts","../src/component/authorization/BearerToken.ts","../src/component/authorization/BasicAuth.ts","../src/component/authorization/APIKey.ts"],"names":["__defProp","Object","defineProperty","__getOwnPropDesc","getOwnPropertyDescriptor","__getOwnPropNames","getOwnPropertyNames","__hasOwnProp","prototype","hasOwnProperty","__export","target","all","name","get","enumerable","__copyProps","to","from","except","desc","key","call","__toCommonJS","mod","value","index_exports","APIKey","APIKey_default","BasicAuth","BasicAuth_default","BearerToken","BearerToken_default","InterceptEvent","InterceptEvent_default","Method","Method_default","RequestBodyType","RequestBodyType_default","convertFormDataToObject","convertObjectToFormData","convertObjectToURLSearchParams","convertURLSearchParamsToObject","default","Requester_default","module","exports","RequesterResponse","response","status","getData","Promise","resolve","reject","data","headers","includes","json","text","then","getHeaders","Response_default","RequestBodyTypeHeaders","formData","forEach","originalKey","keys","match","length","Error","lastKey","pop","isArray","endsWith","nested","parentKeys","FormData","keyPath","File","formKey","shift","map","k","join","set","URLSearchParams","fromEntries","entries","searchData","create","assign","_Requester","config","namespace","defaults","fetch","url","method","GET","body","query","signal","auth","URL","baseURL","authorization","search","searchParams","getQuery","toString","abortController","AbortController","options","POST","timeoutInterval","setTimeout","abort","timeout","interceptors","filter","i","PRE_REQUEST","callback","PRE_RESPONSE","POST_RESPONSE","catch","error","finally","clearTimeout","post","bodyType","bodyObject","JSON","parse","e","Urlencoded","stringify","on","event","callable","push","off","interceptorId","splice","Requester","AppendParameterTo","AppendParameterTo_default","AbstractAuthorization","getBody","AbstractAuthorization_default","token","appendTo","Header","Authorization","username","password","atob","Query"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// src/index.ts\nvar index_exports = {};\n__export(index_exports, {\n  APIKey: () => APIKey_default,\n  BasicAuth: () => BasicAuth_default,\n  BearerToken: () => BearerToken_default,\n  InterceptEvent: () => InterceptEvent_default,\n  Method: () => Method_default,\n  RequestBodyType: () => RequestBodyType_default,\n  convertFormDataToObject: () => convertFormDataToObject,\n  convertObjectToFormData: () => convertObjectToFormData,\n  convertObjectToURLSearchParams: () => convertObjectToURLSearchParams,\n  convertURLSearchParamsToObject: () => convertURLSearchParamsToObject,\n  default: () => Requester_default\n});\nmodule.exports = __toCommonJS(index_exports);\n\n// src/enum/Method.ts\nvar Method = /* @__PURE__ */ ((Method2) => {\n  Method2[\"POST\"] = \"POST\";\n  Method2[\"GET\"] = \"GET\";\n  Method2[\"PUT\"] = \"PUT\";\n  Method2[\"DELETE\"] = \"DELETE\";\n  Method2[\"PATCH\"] = \"PATCH\";\n  return Method2;\n})(Method || {});\nvar Method_default = Method;\n\n// src/Response.ts\nvar RequesterResponse = class {\n  constructor(response) {\n    this.response = response;\n    this.status = response.status;\n  }\n  getData() {\n    return new Promise((resolve, reject) => {\n      if (this.data) {\n        return resolve(this.data);\n      }\n      (this.response.headers.get(\"content-type\")?.includes(\"application/json\") ? this.response.json() : this.response.text()).then((data) => {\n        this.data = data;\n        resolve(this.data);\n      });\n    });\n  }\n  getHeaders() {\n    return this.response.headers;\n  }\n};\nvar Response_default = RequesterResponse;\n\n// src/enum/InterceptEvent.ts\nvar InterceptEvent = /* @__PURE__ */ ((InterceptEvent2) => {\n  InterceptEvent2[InterceptEvent2[\"PRE_REQUEST\"] = 0] = \"PRE_REQUEST\";\n  InterceptEvent2[InterceptEvent2[\"POST_REQUEST\"] = 1] = \"POST_REQUEST\";\n  InterceptEvent2[InterceptEvent2[\"PRE_RESPONSE\"] = 2] = \"PRE_RESPONSE\";\n  InterceptEvent2[InterceptEvent2[\"POST_RESPONSE\"] = 3] = \"POST_RESPONSE\";\n  return InterceptEvent2;\n})(InterceptEvent || {});\nvar InterceptEvent_default = InterceptEvent;\n\n// src/enum/RequestBodyType.ts\nvar RequestBodyType = /* @__PURE__ */ ((RequestBodyType2) => {\n  RequestBodyType2[\"FormData\"] = \"form-data\";\n  RequestBodyType2[\"Urlencoded\"] = \"x-www-form-urlencoded\";\n  RequestBodyType2[\"JSON\"] = \"raw-json\";\n  RequestBodyType2[\"Text\"] = \"raw-text\";\n  RequestBodyType2[\"Xml\"] = \"raw-xml\";\n  RequestBodyType2[\"Html\"] = \"raw-html\";\n  RequestBodyType2[\"Javascript\"] = \"raw-javascript\";\n  RequestBodyType2[\"Binary\"] = \"binary\";\n  return RequestBodyType2;\n})(RequestBodyType || {});\nvar RequestBodyTypeHeaders = {\n  [\"form-data\" /* FormData */]: {},\n  [\"x-www-form-urlencoded\" /* Urlencoded */]: {\n    \"Content-Type\": \"application/x-www-form-urlencoded\"\n  },\n  [\"raw-json\" /* JSON */]: {\n    \"Content-Type\": \"application/json\"\n  },\n  [\"raw-text\" /* Text */]: {\n    \"Content-Type\": \"text/plain\"\n  },\n  [\"raw-html\" /* Html */]: {\n    \"Content-Type\": \"text/html\"\n  },\n  [\"raw-xml\" /* Xml */]: {\n    \"Content-Type\": \"text/xml\"\n  },\n  [\"raw-javascript\" /* Javascript */]: {\n    \"Content-Type\": \"text/javascript\"\n  },\n  [\"binary\" /* Binary */]: {\n    \"Content-Type\": \"application/octet-stream\"\n  }\n};\nvar RequestBodyType_default = RequestBodyType;\n\n// src/helper/DataHelper.ts\nvar convertFormDataToObject = (formData) => {\n  const data = {};\n  formData.forEach(function(value, originalKey) {\n    const keys = originalKey.match(/\\w+/gi) ?? [];\n    if (!keys.length) {\n      throw new Error(\"Invalid Form Data Key: \" + originalKey);\n    }\n    const lastKey = keys.pop();\n    const isArray = originalKey.endsWith(\"[]\");\n    let nested = data;\n    (keys || []).forEach(function(key) {\n      nested[key] = { ...nested[key] ?? {} };\n      nested = nested[key];\n    });\n    if (lastKey) {\n      nested[lastKey] = isArray ? [...nested[lastKey] ?? [], value] : value;\n    }\n  });\n  return data;\n};\nvar convertObjectToFormData = (data, formData, parentKeys) => {\n  formData = formData || new FormData();\n  for (let key in data) {\n    const value = data[key];\n    const keyPath = [...parentKeys || [], key];\n    if (value instanceof Object && !(value instanceof File)) {\n      formData = convertObjectToFormData(value, formData, keyPath);\n      continue;\n    }\n    const formKey = keyPath.shift() + keyPath.map((k) => \"[\" + k + \"]\").join(\"\");\n    formData.set(formKey, value);\n  }\n  return formData;\n};\nvar convertObjectToURLSearchParams = (data) => {\n  const formData = convertObjectToFormData(data);\n  return new URLSearchParams(Object.fromEntries(formData.entries()));\n};\nvar convertURLSearchParamsToObject = (searchData) => {\n  let data = {};\n  searchData.forEach((value, originalKey) => {\n    const keys = originalKey.match(/\\w+/gi);\n    const lastKey = Object.create(keys).pop();\n    let nested = data;\n    (keys || []).forEach((key) => {\n      if (key === lastKey) {\n        nested[key] = originalKey.match(/\\[]$/i) ? Object.assign(nested[key] || [], [value]) : value;\n      } else {\n        nested[key] = nested[key] || {};\n        nested = nested[key];\n      }\n    });\n  });\n  return data;\n};\n\n// src/Requester.ts\nvar _Requester = class _Requester {\n  constructor(config, namespace) {\n    this.config = { ...config, ...namespace && _Requester.namespace[namespace] ? _Requester.namespace[namespace] : _Requester.defaults };\n  }\n  static on(event, callable) {\n    return this.interceptors.push([event, callable]);\n  }\n  static off(interceptorId) {\n    if (this.interceptors[interceptorId] === void 0)\n      return;\n    this.interceptors.splice(interceptorId, 1);\n  }\n  fetch({\n    url,\n    method = Method_default.GET,\n    body,\n    query,\n    signal,\n    auth,\n    headers\n  }) {\n    url = new URL(url, this.config?.baseURL || void 0);\n    auth ?? (auth = this.config?.authorization);\n    const search = new URLSearchParams(\n      {\n        ...query ? Object.fromEntries(query instanceof URLSearchParams ? query : query instanceof FormData ? convertObjectToURLSearchParams(convertFormDataToObject(query)) : new URLSearchParams(query)) : {},\n        ...Object.fromEntries(url.searchParams),\n        ...new URLSearchParams(auth?.getQuery() || {})\n      }\n    );\n    url.search = search.toString();\n    const abortController = new AbortController();\n    let options = {\n      signal: signal || abortController.signal,\n      method: method || Method_default.GET,\n      headers: {\n        ...headers || {},\n        ...auth?.getHeaders() || {},\n        ...this.config?.headers || {}\n      }\n    };\n    switch (method) {\n      case Method_default.POST: {\n        options = {\n          ...options,\n          body\n        };\n      }\n    }\n    const timeoutInterval = setTimeout(() => abortController?.abort(), this.config.timeout || 3e4);\n    _Requester.interceptors.filter(([i]) => i === InterceptEvent_default.PRE_REQUEST).forEach(([i, callback]) => {\n      options = callback(options);\n    });\n    return new Promise((resolve, reject) => {\n      fetch(url, options).then((response) => {\n        _Requester.interceptors.filter(([i]) => i === InterceptEvent_default.PRE_RESPONSE).forEach(([i, callback]) => {\n          response = callback(response);\n        });\n        resolve(new Response_default(response));\n        _Requester.interceptors.filter(([i]) => i === InterceptEvent_default.POST_RESPONSE).forEach(([i, callback]) => {\n          response = callback(response);\n        });\n      }).catch((error) => reject(error)).finally(() => clearTimeout(timeoutInterval));\n    });\n  }\n  post(url, body, bodyType) {\n    let bodyObject = null;\n    bodyType || (bodyType = RequestBodyType_default.JSON);\n    switch (typeof body) {\n      case \"string\": {\n        try {\n          bodyObject = JSON.parse(body);\n        } catch (e) {\n        }\n        break;\n      }\n      case \"object\": {\n        bodyObject = body instanceof FormData ? convertFormDataToObject(body) : body;\n        break;\n      }\n    }\n    const formData = bodyObject ? convertObjectToFormData(bodyObject) : null;\n    switch (bodyType) {\n      case RequestBodyType_default.Urlencoded: {\n        body = bodyObject ? convertObjectToURLSearchParams(bodyObject).toString() : body;\n        break;\n      }\n      case RequestBodyType_default.FormData: {\n        body = formData || body;\n        break;\n      }\n      case RequestBodyType_default.JSON: {\n        body = bodyObject ? JSON.stringify(bodyObject) : body;\n        break;\n      }\n      default: {\n      }\n    }\n    return this.fetch({\n      url,\n      method: Method_default.POST,\n      body,\n      headers: RequestBodyTypeHeaders[bodyType]\n    });\n  }\n  get(url, query) {\n    if (!(query instanceof URLSearchParams)) {\n      query = convertObjectToURLSearchParams(query);\n    }\n    return this.fetch({\n      url,\n      method: Method_default.GET,\n      query\n    });\n  }\n};\n_Requester.interceptors = [];\n_Requester.defaults = {\n  timeout: 3e3\n};\n_Requester.namespace = {};\nvar Requester = _Requester;\nvar Requester_default = Requester;\n\n// src/enum/AppendParameterTo.ts\nvar AppendParameterTo = /* @__PURE__ */ ((AppendParameterTo2) => {\n  AppendParameterTo2[AppendParameterTo2[\"Header\"] = 0] = \"Header\";\n  AppendParameterTo2[AppendParameterTo2[\"Query\"] = 1] = \"Query\";\n  AppendParameterTo2[AppendParameterTo2[\"Body\"] = 2] = \"Body\";\n  return AppendParameterTo2;\n})(AppendParameterTo || {});\nvar AppendParameterTo_default = AppendParameterTo;\n\n// src/component/authorization/AbstractAuthorization.ts\nvar AbstractAuthorization = class {\n  getBody() {\n    return {};\n  }\n  getHeaders() {\n    return {};\n  }\n  getQuery() {\n    return {};\n  }\n};\nvar AbstractAuthorization_default = AbstractAuthorization;\n\n// src/component/authorization/BearerToken.ts\nvar BearerToken = class extends AbstractAuthorization_default {\n  constructor(token) {\n    super();\n    this.appendTo = AppendParameterTo_default.Header;\n    this.token = token;\n  }\n  getHeaders() {\n    return {\n      Authorization: \"Bearer \" + this.token\n    };\n  }\n};\nvar BearerToken_default = BearerToken;\n\n// src/component/authorization/BasicAuth.ts\nvar BasicAuth = class extends AbstractAuthorization_default {\n  constructor(username, password) {\n    super();\n    this.appendTo = AppendParameterTo_default.Header;\n    this.username = username;\n    this.password = password;\n  }\n  getHeaders() {\n    return {\n      Authorization: atob(this.username + \":\" + this.password)\n    };\n  }\n};\nvar BasicAuth_default = BasicAuth;\n\n// src/component/authorization/APIKey.ts\nvar APIKey = class extends AbstractAuthorization_default {\n  constructor(key = \"X-Api-Key\", value, appendTo) {\n    super();\n    this.key = key;\n    this.value = value;\n    this.appendTo = appendTo;\n  }\n  getHeaders() {\n    if (this.appendTo === AppendParameterTo_default.Header) {\n      return {\n        [this.key]: this.value\n      };\n    }\n    return super.getHeaders();\n  }\n  getQuery() {\n    if (this.appendTo === AppendParameterTo_default.Query) {\n      return {\n        [this.key]: this.value\n      };\n    }\n    return this.getBody();\n  }\n};\nvar APIKey_default = APIKey;\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  APIKey,\n  BasicAuth,\n  BearerToken,\n  InterceptEvent,\n  Method,\n  RequestBodyType,\n  convertFormDataToObject,\n  convertObjectToFormData,\n  convertObjectToURLSearchParams,\n  convertURLSearchParamsToObject\n});\n","import Requester, {\n    convertFormDataToObject,\n    convertObjectToURLSearchParams,\n    convertObjectToFormData,\n    convertURLSearchParamsToObject\n} from \"@src/Requester\";\nimport InterceptEvent from \"@src/enum/InterceptEvent\";\nimport Method from \"@src/enum/Method\";\nimport RequestBodyType from \"@src/enum/RequestBodyType\";\nimport BearerToken from \"@src/component/authorization/BearerToken\";\nimport BasicAuth from \"@src/component/authorization/BasicAuth\";\nimport APIKey from \"@src/component/authorization/APIKey\";\n\nexport {\n    Requester as default,\n    convertFormDataToObject,\n    convertObjectToURLSearchParams,\n    convertObjectToFormData,\n    convertURLSearchParamsToObject,\n    InterceptEvent,\n    Method,\n    RequestBodyType,\n    BearerToken,\n    BasicAuth,\n    APIKey\n};\n","enum Method {\n    POST = 'POST',\n    GET = 'GET',\n    PUT = 'PUT',\n    DELETE = 'DELETE',\n    PATCH = 'PATCH'\n}\n\nexport default Method;\n","class RequesterResponse {\n    response: Response;\n    status: number;\n    data: any;\n\n    constructor(response: Response) {\n        this.response = response;\n        this.status = response.status;\n    }\n\n    getData(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            if(this.data) {\n                return resolve(this.data);\n            }\n\n            (this.response.headers.get('content-type')?.includes('application/json') ? this.response.json() : this.response.text()).then((data) => {\n                this.data = data;\n                resolve(this.data);\n            })\n        });\n    }\n\n    getHeaders(): Headers {\n        return this.response.headers;\n    }\n\n}\n\nexport default RequesterResponse;\n","enum InterceptEvent {\n    PRE_REQUEST,\n    POST_REQUEST,\n    PRE_RESPONSE,\n    POST_RESPONSE\n}\n\nexport default InterceptEvent;\n","enum RequestBodyType {\n    FormData = 'form-data',\n    Urlencoded = 'x-www-form-urlencoded',\n    JSON = 'raw-json',\n    Text = 'raw-text',\n    Xml = 'raw-xml',\n    Html = 'raw-html',\n    Javascript = 'raw-javascript',\n    Binary = 'binary'\n}\n\nconst RequestBodyTypeHeaders: { [key: string]: { [key: string]: string } } = {\n    [RequestBodyType.FormData]: {\n    },\n    [RequestBodyType.Urlencoded]: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n    },\n    [RequestBodyType.JSON]: {\n        'Content-Type': 'application/json'\n    },\n    [RequestBodyType.Text]: {\n        'Content-Type': 'text/plain'\n    },\n    [RequestBodyType.Html]: {\n        'Content-Type': 'text/html'\n    },\n    [RequestBodyType.Xml]: {\n        'Content-Type': 'text/xml'\n    },\n    [RequestBodyType.Javascript]: {\n        'Content-Type': 'text/javascript'\n    },\n    [RequestBodyType.Binary]: {\n        'Content-Type': 'application/octet-stream'\n    }\n};\n\nexport {RequestBodyTypeHeaders};\n\nexport default RequestBodyType\n","import StandardObjectType from \"@src/type/StandardObjectType\";\n\nconst convertFormDataToObject = (formData: FormData): StandardObjectType => {\n    const data: StandardObjectType = {};\n    formData.forEach(function (value, originalKey) {\n        const keys = originalKey.match(/\\w+/gi) ?? [];\n        if (!keys.length) {\n            throw new Error('Invalid Form Data Key: ' + originalKey);\n        }\n        const lastKey = keys.pop();\n        const isArray = originalKey.endsWith('[]');\n\n        let nested: any = data;\n        (keys || []).forEach(function (key) {\n            nested[key] = {...(nested[key] ?? {})};\n            nested = nested[key];\n        });\n\n        if (lastKey) {\n            nested[lastKey] = isArray ? [...(nested[lastKey] ?? []), value] : value;\n        }\n    });\n\n    return data;\n};\n\nconst convertObjectToFormData = (data: StandardObjectType, formData?: FormData, parentKeys?: string[]): FormData => {\n    formData = formData || new FormData();\n\n    for (let key in data) {\n        const value: any = data[key];\n        const keyPath = [...(parentKeys || []), key];\n        if (value instanceof Object && !(value instanceof File)) {\n            formData = convertObjectToFormData(value, formData, keyPath);\n            continue;\n        }\n\n        const formKey = keyPath.shift() + keyPath.map(k => '[' + k + ']').join('');\n        formData.set(formKey, value);\n    }\n\n    return formData;\n}\n\nconst convertObjectToURLSearchParams = (data: StandardObjectType): URLSearchParams => {\n    const formData = convertObjectToFormData(data);\n    return new URLSearchParams(Object.fromEntries(formData.entries()) as StandardObjectType)\n}\n\nconst convertURLSearchParamsToObject = (searchData: URLSearchParams): object => {\n    let data: object = {};\n    searchData.forEach((value, originalKey) => {\n        const keys = originalKey.match(/\\w+/gi)\n        const lastKey = Object.create(keys).pop();\n        let nested:{[key: string]: any} = data;\n        (keys || []).forEach((key) => {\n            if (key === lastKey) {\n                nested[key as keyof object] = originalKey.match(/\\[]$/i) ? Object.assign(nested[key as keyof object] || [], [value]) : value;\n            } else {\n                nested[key as keyof object] = (nested[key as keyof object] || {});\n                nested = nested[key as keyof object];\n            }\n        });\n    });\n\n    return data;\n};\n\nexport {convertFormDataToObject, convertObjectToFormData, convertObjectToURLSearchParams, convertURLSearchParamsToObject};\n","import Request from \"@src/type/Request\";\nimport Method from \"@src/enum/Method\";\nimport Response from \"@src/Response\";\nimport InterceptEvent from \"@src/enum/InterceptEvent\";\nimport RequestBodyType, {RequestBodyTypeHeaders} from \"@src/enum/RequestBodyType\";\nimport Config from \"@src/type/Config\";\nimport {convertFormDataToObject, convertObjectToFormData, convertObjectToURLSearchParams, convertURLSearchParamsToObject} from \"@src/helper/DataHelper\";\nimport StandardObjectType from \"@src/type/StandardObjectType\";\n\nclass Requester {\n\n    private static interceptors: Array<[InterceptEvent, Function]> = [];\n\n    static defaults: Config = {\n        timeout: 3000\n    };\n\n    static namespace: {[key: string]: Config} = {};\n\n    private config: Config;\n\n    constructor(config?: Config, namespace?: string) {\n        this.config = {...config, ...(namespace && Requester.namespace[namespace] ? Requester.namespace[namespace] : Requester.defaults)};\n    }\n\n    static on(event: InterceptEvent, callable: Function): number {\n        return this.interceptors.push([event, callable]);\n    };\n\n    static off(interceptorId: number): void {\n        if (this.interceptors[interceptorId] === undefined)\n            return;\n\n        this.interceptors.splice(interceptorId, 1);\n    }\n\n    fetch({\n              url,\n              method = Method.GET,\n              body,\n              query,\n              signal,\n              auth,\n              headers\n          }: Request): Promise<Response> {\n\n        url = new URL(url, this.config?.baseURL || undefined);\n        auth ??= this.config?.authorization;\n\n        const search = new URLSearchParams({\n                ...(query ? Object.fromEntries(query instanceof URLSearchParams ? query : (query instanceof FormData ? convertObjectToURLSearchParams(convertFormDataToObject(query)) : new URLSearchParams(query))) : {}),\n                ...(Object.fromEntries((url as URL).searchParams)),\n                ...(new URLSearchParams(auth?.getQuery() || {}))\n            }\n        );\n\n        url.search = search.toString();\n\n        const abortController = new AbortController();\n        let options: any = {\n            signal: signal || abortController.signal,\n            method: method || Method.GET,\n            headers: {\n                ...(headers || {}),\n                ...(auth?.getHeaders() || {}),\n                ...(this.config?.headers || {})\n            }\n        };\n\n        switch (method) {\n            case Method.POST: {\n                options = {\n                    ...options,\n                    body: body\n                }\n            }\n        }\n\n        const timeoutInterval = setTimeout(() => abortController?.abort(), this.config.timeout || 30000);\n\n        Requester.interceptors.filter(([i]) => i === InterceptEvent.PRE_REQUEST).forEach(([i, callback]) => {\n            options = callback(options);\n        });\n\n        return new Promise((resolve, reject) => {\n            fetch(url, options)\n                .then(response => {\n                    Requester.interceptors.filter(([i]) => i === InterceptEvent.PRE_RESPONSE).forEach(([i, callback]) => {\n                        response = callback(response);\n                    });\n\n                    resolve(new Response(response));\n\n                    Requester.interceptors.filter(([i]) => i === InterceptEvent.POST_RESPONSE).forEach(([i, callback]) => {\n                        response = callback(response);\n                    });\n                })\n                .catch((error) => reject(error))\n                .finally(() => clearTimeout(timeoutInterval));\n        });\n    }\n\n    post(url: string, body?: FormData | string | StandardObjectType, bodyType?: RequestBodyType) {\n        let bodyObject = null;\n        bodyType ||= RequestBodyType.JSON;\n\n        switch (typeof body) {\n            case 'string': {\n                try {\n                    bodyObject = JSON.parse(body);\n                } catch (e) {\n\n                }\n                break;\n            }\n            case 'object': {\n                bodyObject = (body instanceof FormData) ? convertFormDataToObject(body) : body;\n                break;\n            }\n        }\n\n        const formData = bodyObject ? convertObjectToFormData(bodyObject) : null;\n\n        switch (bodyType) {\n            case RequestBodyType.Urlencoded: {\n                body = bodyObject ? (convertObjectToURLSearchParams(bodyObject)).toString() : body;\n                break;\n            }\n            case RequestBodyType.FormData: {\n                    body = formData || body;\n                break;\n            }\n            case RequestBodyType.JSON: {\n                    body = bodyObject ? JSON.stringify(bodyObject) : body;\n                break;\n            }\n            default: {\n\n            }\n        }\n\n        return this.fetch({\n            url,\n            method: Method.POST,\n            body,\n            headers: RequestBodyTypeHeaders[bodyType]\n        });\n    }\n\n    get(url: string, query: StandardObjectType | URLSearchParams) {\n\n        if(!(query instanceof URLSearchParams)) {\n            query = convertObjectToURLSearchParams(query);\n        }\n\n        return this.fetch({\n            url,\n            method: Method.GET,\n            query\n        });\n    }\n}\n\nexport {convertObjectToURLSearchParams, convertObjectToFormData, convertFormDataToObject, convertURLSearchParamsToObject};\n\nexport default Requester;\n","enum AppendParameterTo {\n    Header,\n    Query,\n    Body\n}\n\nexport default AppendParameterTo;\n","import AppendParameterTo from \"@src/enum/AppendParameterTo\";\nimport AuthorizationInterface from \"@src/component/authorization/AuthorizationInterface\";\nimport StandardObjectType from \"@src/type/StandardObjectType\";\n\nabstract class AbstractAuthorization implements AuthorizationInterface {\n    abstract appendTo: AppendParameterTo;\n\n    getBody(): StandardObjectType {\n        return {};\n    }\n\n    getHeaders(): { [key: string]: string | number } {\n        return {};\n    }\n\n    getQuery(): StandardObjectType {\n        return {};\n    }\n\n}\n\nexport default AbstractAuthorization;\n","import AppendParameterTo from \"@src/enum/AppendParameterTo\";\nimport AbstractAuthorization from \"@src/component/authorization/AbstractAuthorization\";\n\nclass BearerToken extends AbstractAuthorization {\n\n    appendTo: AppendParameterTo = AppendParameterTo.Header;\n\n    token: string;\n    constructor(token: string) {\n        super();\n        this.token = token;\n    }\n\n    getHeaders(): { [p: string]: string } {\n        return {\n            Authorization: 'Bearer ' + this.token\n        };\n    }\n\n}\n\nexport default BearerToken;\n","import AppendParameterTo from \"@src/enum/AppendParameterTo\";\nimport AbstractAuthorization from \"@src/component/authorization/AbstractAuthorization\";\n\nclass BasicAuth extends AbstractAuthorization {\n\n    appendTo: AppendParameterTo = AppendParameterTo.Header;\n\n    username: string;\n    password: string;\n\n    constructor(username: string, password: string) {\n        super();\n        this.username = username;\n        this.password = password;\n    }\n\n    getHeaders(): { [key: string]: string } {\n        return {\n            Authorization: atob(this.username + ':' + this.password)\n        };\n    }\n\n}\n\n\nexport default BasicAuth;\n","import AppendParameterTo from \"@src/enum/AppendParameterTo\";\nimport AbstractAuthorization from \"@src/component/authorization/AbstractAuthorization\";\n\nclass APIKey extends AbstractAuthorization {\n\n    appendTo: AppendParameterTo;\n    key: string;\n    value: string;\n\n    constructor(key: string = 'X-Api-Key', value: string, appendTo: AppendParameterTo) {\n        super();\n\n        this.key = key;\n        this.value = value;\n\n        this.appendTo = appendTo;\n    }\n\n    getHeaders(): { [p: string]: string | number } {\n        if(this.appendTo === AppendParameterTo.Header) {\n            return {\n                [this.key]: this.value\n            };\n        }\n\n        return super.getHeaders();\n    }\n\n    getQuery(): { [p: string]: string | number } {\n        if(this.appendTo === AppendParameterTo.Query) {\n            return {\n                [this.key]: this.value\n            };\n        }\n\n        return this.getBody();\n    }\n}\n\nexport default APIKey;\n"]}