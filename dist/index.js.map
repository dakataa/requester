{"version":3,"sources":["../src/index.ts","../src/enum/Method.ts","../src/Response.ts","../src/enum/InterceptEvent.ts","../src/enum/RequestBodyType.ts","../src/helper/DataHelper.ts","../src/Requester.ts"],"names":["Method","InterceptEvent","RequestBodyType"],"mappings":"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","sourcesContent":["import Requester, {convertFormDataToObject, convertObjectToURLSearchParams, convertObjectToFormData, convertURLSearchParamsToObject} from \"@src/Requester\";\nimport InterceptEvent from \"@src/enum/InterceptEvent\";\nimport Method from \"@src/enum/Method\";\nimport RequestBodyType from \"@src/enum/RequestBodyType\";\n\n\nexport {InterceptEvent, Method, RequestBodyType, convertFormDataToObject, convertObjectToURLSearchParams, convertObjectToFormData, convertURLSearchParamsToObject};\n\nexport default Requester;\n","enum Method {\n    POST = 'POST',\n    GET = 'GET',\n    PUT = 'PUT'\n}\n\nexport default Method;\n","class RequesterResponse {\n    response: Response;\n    status: number;\n    data: any;\n\n    constructor(response: Response) {\n        this.response = response;\n        this.status = response.status;\n    }\n\n    getData(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            if(this.data) {\n                return resolve(this.data);\n            }\n\n            (this.response.headers.get('content-type')?.includes('application/json') ? this.response.json() : this.response.text()).then((data) => {\n                this.data = data;\n                resolve(this.data);\n            })\n        });\n    }\n\n    getHeaders(): Headers {\n        return this.response.headers;\n    }\n\n}\n\nexport default RequesterResponse;\n","enum InterceptEvent {\n    PRE_REQUEST,\n    POST_REQUEST,\n    PRE_RESPONSE,\n    POST_RESPONSE\n}\n\nexport default InterceptEvent;\n","enum RequestBodyType {\n    FormData = 'form-data',\n    Urlencoded = 'x-www-form-urlencoded',\n    JSON = 'raw-json',\n    Text = 'raw-text',\n    Xml = 'raw-xml',\n    Html = 'raw-html',\n    Javascript = 'raw-javascript',\n    Binary = 'binary'\n}\n\nconst RequestBodyTypeHeaders: { [key: string]: { [key: string]: string } } = {\n    [RequestBodyType.FormData]: {\n        'Content-Type': 'multipart/form-data'\n    },\n    [RequestBodyType.Urlencoded]: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n    },\n    [RequestBodyType.JSON]: {\n        'Content-Type': 'application/json'\n    },\n    [RequestBodyType.Text]: {\n        'Content-Type': 'text/plain'\n    },\n    [RequestBodyType.Html]: {\n        'Content-Type': 'text/html'\n    },\n    [RequestBodyType.Xml]: {\n        'Content-Type': 'text/xml'\n    },\n    [RequestBodyType.Javascript]: {\n        'Content-Type': 'text/javascript'\n    },\n    [RequestBodyType.Binary]: {\n        'Content-Type': 'application/octet-stream'\n    }\n};\n\nexport {RequestBodyTypeHeaders};\n\nexport default RequestBodyType\n","import StandardObjectType from \"@src/type/StandardObjectType\";\n\nconst convertFormDataToObject = (formData: FormData): StandardObjectType => {\n    let data: StandardObjectType = {};\n    formData.forEach((value, originalKey) => {\n        const keys = originalKey.match(/\\w+/gi)\n        const lastKey = Object.create(keys).pop();\n        let nested = data;\n        (keys || []).forEach((key) => {\n            if (key === lastKey) {\n                nested[key] = originalKey.match(/\\[]$/i) ? Object.assign(nested[key] ?? [], [value]) : value;\n            } else {\n                nested[key] = (nested[key] || {});\n                nested = nested[key];\n            }\n        });\n    });\n\n    return data;\n};\n\nconst convertObjectToFormData = (data: StandardObjectType, formData?: FormData, parentKeys?: string[]): FormData => {\n    formData = formData || new FormData();\n\n    for (let key in data) {\n        const value: any = data[key];\n        const keyPath = [...(parentKeys || []), key];\n        if (value instanceof Object) {\n            formData = convertObjectToFormData(value, formData, keyPath);\n            continue;\n        }\n\n        const formKey = keyPath.shift() + keyPath.map(k => '[' + k + ']').join('');\n        formData.set(formKey, value);\n    }\n\n    return formData;\n}\n\nconst convertObjectToURLSearchParams = (data: StandardObjectType): URLSearchParams => {\n    const formData = convertObjectToFormData(data);\n    return new URLSearchParams(Object.fromEntries(formData.entries()) as StandardObjectType)\n}\n\nconst convertURLSearchParamsToObject = (searchData: URLSearchParams): object => {\n    let data: object = {};\n    searchData.forEach((value, originalKey) => {\n        console.log('value', value, originalKey);\n        const keys = originalKey.match(/\\w+/gi)\n        const lastKey = Object.create(keys).pop();\n        let nested:{[key: string]: any} = data;\n        (keys || []).forEach((key) => {\n            if (key === lastKey) {\n                nested[key as keyof object] = originalKey.match(/\\[]$/i) ? Object.assign(nested[key as keyof object] || [], [value]) : value;\n            } else {\n                nested[key as keyof object] = (nested[key as keyof object] || {});\n                nested = nested[key as keyof object];\n            }\n        });\n    });\n\n    return data;\n};\n\nexport {convertFormDataToObject, convertObjectToFormData, convertObjectToURLSearchParams, convertURLSearchParamsToObject};\n","import Request from \"@src/type/Request\";\nimport Method from \"@src/enum/Method\";\nimport Response from \"@src/Response\";\nimport InterceptEvent from \"@src/enum/InterceptEvent\";\nimport RequestBodyType, {RequestBodyTypeHeaders} from \"@src/enum/RequestBodyType\";\nimport Config from \"@src/type/Config\";\nimport {convertFormDataToObject, convertObjectToFormData, convertObjectToURLSearchParams, convertURLSearchParamsToObject} from \"@src/helper/DataHelper\";\nimport StandardObjectType from \"@src/type/StandardObjectType\";\n\nclass Requester {\n\n    private static interceptors: Array<[InterceptEvent, Function]> = [];\n\n    static defaults: Config = {\n        timeout: 3000\n    };\n\n    private config: Config;\n\n    constructor(config?: Config) {\n        this.config = config || Requester.defaults;\n    }\n\n    static on(event: InterceptEvent, callable: Function): number {\n        return this.interceptors.push([event, callable]);\n    };\n\n    static off(interceptorId: number): void {\n        if (this.interceptors[interceptorId] === undefined)\n            return;\n\n        this.interceptors.splice(interceptorId, 1);\n    }\n\n    fetch({\n              url,\n              method = Method.GET,\n              body,\n              query,\n              signal,\n              auth,\n              headers\n          }: Request): Promise<Response> {\n\n        url = new URL(url, this.config?.baseURL || undefined);\n        const search = new URLSearchParams({\n                ...Object.fromEntries(query instanceof URLSearchParams ? query : new URLSearchParams(query)),\n                ...(Object.fromEntries((url as URL).searchParams)),\n                ...(new URLSearchParams(auth?.getQuery() || {}))\n            }\n        );\n\n        url.search = search.toString();\n\n        const abortController = new AbortController();\n        let options: any = {\n            signal: signal || abortController.signal,\n            method: method || Method.GET,\n            headers: {\n                ...headers,\n                ...(auth?.getHeaders() || {}),\n                ...(this.config.headers || {})\n            } || {}\n        };\n\n        switch (method) {\n            case Method.POST: {\n                options = {\n                    ...options,\n                    body: body\n                }\n            }\n        }\n\n        const timeoutInterval = setTimeout(() => abortController?.abort(), this.config.timeout || 30000);\n\n        Requester.interceptors.filter(([i]) => i === InterceptEvent.PRE_REQUEST).forEach(([i, callback]) => {\n            options = callback(options);\n        });\n\n        return new Promise((resolve, reject) => {\n            fetch(url, options)\n                .then(response => {\n                    Requester.interceptors.filter(([i]) => i === InterceptEvent.PRE_RESPONSE).forEach(([i, callback]) => {\n                        response = callback(response);\n                    });\n\n                    resolve(new Response(response));\n\n                    Requester.interceptors.filter(([i]) => i === InterceptEvent.POST_RESPONSE).forEach(([i, callback]) => {\n                        response = callback(response);\n                    });\n                })\n                .catch((error) => reject(error))\n                .finally(() => clearTimeout(timeoutInterval));\n        });\n    }\n\n    post(url: string, body?: FormData | string | StandardObjectType, bodyType?: RequestBodyType) {\n        let bodyObject = null;\n        bodyType ||= RequestBodyType.JSON;\n\n        switch (typeof body) {\n            case 'string': {\n                try {\n                    bodyObject = JSON.parse(body);\n                } catch (e) {\n\n                }\n                break;\n            }\n            case 'object': {\n                bodyObject = (body instanceof FormData) ? convertFormDataToObject(body) : body;\n                break;\n            }\n        }\n\n        const formData = bodyObject ? convertObjectToFormData(bodyObject) : null;\n\n        switch (bodyType) {\n            case RequestBodyType.Urlencoded: {\n                body = bodyObject ? (convertObjectToURLSearchParams(bodyObject)).toString() : body;\n                break;\n            }\n            case RequestBodyType.FormData: {\n                    body = formData || body;\n                break;\n            }\n            case RequestBodyType.JSON: {\n                    body = bodyObject ? JSON.stringify(bodyObject) : body;\n                break;\n            }\n            default: {\n\n            }\n        }\n\n        return this.fetch({\n            url,\n            method: Method.POST,\n            body,\n            headers: RequestBodyTypeHeaders[bodyType]\n        });\n    }\n\n    get(url: string, query: StandardObjectType | URLSearchParams) {\n\n        if(!(query instanceof URLSearchParams)) {\n            query = convertObjectToURLSearchParams(query);\n        }\n\n        return this.fetch({\n            url,\n            method: Method.GET,\n            query\n        });\n    }\n}\n\nexport {convertObjectToURLSearchParams, convertObjectToFormData, convertFormDataToObject, convertURLSearchParamsToObject};\n\nexport default Requester;\n"]}